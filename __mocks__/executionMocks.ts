import { v4 as uuidv4 } from 'uuid';

export const mockExecutions = [
  {
    id: uuidv4(),
    createdAt: '2023-08-29T20:02:29.554Z',
    updatedAt: '2023-08-29T20:02:29.554Z',
    deletedAt: null,
    duration: 0,
    success: false,
    statusMessage: 'No response was received',
    code: 'NO_RESPONSE',
    successCriteriaMatched: null,
    successCriteria: '',
    output: [],
    input: {},
    workflowFile: {},
    stepId: null,
    testId: 'testId',
    steps: [
      {
        id: uuidv4(),
        date: new Date(),
        name: 'Input',
        type: 'START',
        duration: 6.32124400138855,
        durationPortion: 1.24,
        inputs: null,
        output: null,
        context: {
          before: {},
          after: {},
        },
      },
      {
        id: uuidv4(),
        date: new Date(),
        name: 'Formula',
        type: 'FORMULA',
        duration: 440.82175900042057,
        durationPortion: 86.45,
        inputs: [{ formula: 'test' }],
        output: [],
        context: {
          before: {},
          after: {},
        },
      },
    ],
  },
  {
    id: uuidv4(),
    createdAt: '2023-08-29T20:11:37.108Z',
    updatedAt: '2023-08-29T20:11:37.108Z',
    deletedAt: null,
    duration: 523.2756429985166,
    success: false,
    statusMessage: "Unexpected token ')' [<isolated-vm>:176:2]",
    code: 'FAILED_WORKFLOW_AT_RUNTIME',
    successCriteriaMatched: null,
    successCriteria: '',
    output: [],
    input: {},
    workflowFile: {},
    stepId: null,
    testId: 'testId',
    steps: [
      {
        id: uuidv4(),
        date: new Date(),
        name: 'Input',
        type: 'START',
        duration: 6.32124400138855,
        durationPortion: 1.24,
        inputs: [],
        output: [],
        context: {
          before: {},
          after: {},
        },
      },
      {
        id: uuidv4(),
        date: new Date(),
        name: 'Formula',
        type: 'FORMULA',
        duration: 440.82175900042057,
        durationPortion: 86.45,
        inputs: [{ formula: 'test' }],
        output: [],
        context: {
          before: {},
          after: {},
        },
      },
    ],
  },
];
